package com.cs.study.signup.controller;

import java.util.List;

import org.apache.ibatis.annotations.Param;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.cs.study.radioselect.service.DeptService;
import com.cs.study.radioselect.vo.DeptVO;
import com.cs.study.sample.vo.SampleVO;
import com.cs.study.signup.service.SignupServicerjh;
import com.cs.study.signup.vo.SignupVO;
import com.cs.study.signup.vo.SignupVOrjh;

@Controller
public class SignupControllerrjh {

	private final DeptService deptService;
	private final SignupServicerjh signupServicerjh;

	public SignupControllerrjh(DeptService deptService, SignupServicerjh signupServicerjh) {
		this.deptService = deptService;
		this.signupServicerjh = signupServicerjh;
	}

	@GetMapping("/signup/signupRjh")
	public String signupRjh(Model model, SignupVOrjh signupVOrjh) {

		DeptVO deptVO = new DeptVO();
		deptVO.setDeptGrp("signup_question");
		List<DeptVO> signupQuestionList = deptService.selectDeptList(deptVO);
		model.addAttribute("signupQuestionList", signupQuestionList);

		deptVO = new DeptVO();
		deptVO.setDeptGrp("signup_phone");
		List<DeptVO> signupPhoneList = deptService.selectDeptList(deptVO);
		model.addAttribute("signupPhoneList", signupPhoneList);

		deptVO = new DeptVO();
        deptVO.setDeptGrp("signup_terms");
        List<DeptVO> signupTermsList = deptService.selectDeptList(deptVO);
        if (signupTermsList.size() > 0){
            model.addAttribute("signupTerms", signupTermsList.get(0).getDeptName());
        }

        return "signup/signupRjh";
	}
	
	
	   @GetMapping("/signup/signupListRjh")
	    public String signupListRjh(Model model, SignupVOrjh signupVOrjh){

	        List<SignupVOrjh> signupListrjh = signupServicerjh.signupListrjh(signupVOrjh);
	        model.addAttribute("signupListrjh", signupListrjh);
	        model.addAttribute("signupVOrjh", signupVOrjh);
	       
	        return "signup/signupListRjh";
	    }

    @PostMapping("/signup/insertSignuprjh")
    public String insertSignuprjh(SignupVOrjh signupVOrjh) {
        int insertCnt = signupServicerjh.insertSignuprjh(signupVOrjh);
        // 서비스가 정상이라면?? 
        // 정상 화면으로 이동
//      회원가입 리스트 화면을 추가로 만드세요
//        
//        정규식은 서비스에서 사용 하도록 노력 해 보 세요
//        https://redcoder.tistory.com/182
//        
// 		회원가입을 하는도중에 비밀번호 에서 값이 다를 경우 만들어둔 회원가입 리스트를 리턴한다.
//        비밀번호와 비밀번호 체크의 값이 동일하지 않을경우 리턴을 하면서, signupVo에 있는 입력된 값들을 가지고와서 리스트화먄에 뿌린다.
//        전화번호에 숫자만 받을수 있도록 설정해야한다.
//        아이디는 영어 소문자 대문자 숫자 20글자 미만
//        주소는 앞에 address1은 한글만 입력 가능 하게 하기. 
//        gender 에서 남 / 여 선택이 되지 않았을 경우 알림을 띄워서 선택을 할수 있도록 한다.
//        닉네임 10글자 제한 특수문자 제한
//        비밀번호 입력할때 대문자, 소문자, 숫자 입력을 꼭 하기로.
//        사용자 아이디, 비밀번호, INPUT창에 placeorder 사용해서 위에 적은 가이드라인 적어서 가이드 해주기.
        
        
        
        // 비정상 이라면??
//        return
        // 회원가입 화면으로 signupVO 가지고 이동해라
        // 회원가입 화면은 최초에 데이터없이 갓을까??
        // 질문답변, 전화번호앞자리, 약관

        return "redirect:/signup/signupRjh";
//        return "redirect:/signup/signupListRjh";
    }
}
